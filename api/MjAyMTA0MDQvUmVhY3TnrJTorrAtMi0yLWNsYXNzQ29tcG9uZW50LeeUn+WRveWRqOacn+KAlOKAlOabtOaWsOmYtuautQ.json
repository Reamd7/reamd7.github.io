{"title":"React笔记: 2.2 classComponent 生命周期——更新阶段","date":"2021-04-04T20:57:24.000Z","date_formatted":{"ll":"2021年4月4日","L":"2021/04/04","MM-DD":"04-04"},"link":"20210404/React笔记-2-2-classComponent-生命周期——更新阶段","tags":["React"],"updated":"2021-04-08T16:50:19.042Z","content":"<blockquote>\n<p>reference: <a href=\"https://react.docschina.org/docs/react-component.html\">https://react.docschina.org/docs/react-component.html</a></p>\n</blockquote>\n<iframe \n    style=\"border:1px solid #ccc;border-radius:2px;width:100%;height:300px;\" \n    src=\"/public/$utils/code.html?type=javascript&url=/public/react-doc/02/classComponentLifeCycle.jsx\">\n</iframe>\n<p><a href=\"/20210326/React%E7%AC%94%E8%AE%B0-2-1-classComponent-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E2%80%94%E2%80%94%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5\">React笔记: 2.1 classComponent 生命周期——挂载阶段</a></p>\n<pre class=\"mermaid\">graph TD\n    GetDerivedStateFromProps[static getDerivedStateFromProps]\n    GetDerivedStateFromProps[static getDerivedStateFromProps] --> shouldComponentUpdate[shouldComponentUpdate]\n    shouldComponentUpdate[shouldComponentUpdate] --> render(render)\n    render[render] --> getSnapshotBeforeUpdate(getSnapshotBeforeUpdate)\n    getSnapshotBeforeUpdate[getSnapshotBeforeUpdate] --> componentDidUpdate(componentDidUpdate)</pre>\n<h2 id=\"更新阶段\">更新阶段<a title=\"#更新阶段\" href=\"#更新阶段\"></a></h2>\n<h3 id=\"static-getderivedstatefromprops\">static getDerivedStateFromProps<a title=\"#static-getderivedstatefromprops\" href=\"#static-getderivedstatefromprops\"></a></h3>\n<p>getDerivedStateFromProps 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</p>\n<blockquote>\n<p>并且，这个方法一定要和 componentDidUpdate 一起使用，否则控制台也会有警告。</p>\n</blockquote>\n<p>TODO getDerivedStateFromProps 的用例以及对比</p>\n<h3 id=\"shouldcomponentupdate(nextprops,-nextstate)\">shouldComponentUpdate(nextProps, nextState)<a title=\"#shouldcomponentupdate(nextprops,-nextstate)\" href=\"#shouldcomponentupdate(nextprops,-nextstate)\"></a></h3>\n<blockquote>\n<p><a href=\"https://react.docschina.org/docs/react-component.html#shouldcomponentupdate\">https://react.docschina.org/docs/react-component.html#shouldcomponentupdate</a></p>\n<p>根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。</p>\n<p>当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 forceUpdate() 时不会调用该方法。</p>\n<p>PureComponent 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。</p>\n</blockquote>\n<p>如果能和 immutable 数据结构 一起用 + PureComponent 性能更好，<br>\n当然你也可以在其中修改他默认的行为<br>\n例如：</p>\n<ul>\n<li><a href=\"http://props.name\">props.name</a> &amp; props.pwd 同时修改时候，Component才进行更新，其中一个更新都不进行更新</li>\n<li>props.SomePropsName 只有他更新的情况下，才进行更新。</li>\n</ul>\n<p>从减少更新从而进行性能优化</p>\n<h3 id=\"render-————-jsx\">render ———— JSX<a title=\"#render-————-jsx\" href=\"#render-————-jsx\"></a></h3>\n<h3 id=\"getsnapshotbeforeupdate(prevprops,-prevstate)\">getSnapshotBeforeUpdate(prevProps, prevState)<a title=\"#getsnapshotbeforeupdate(prevprops,-prevstate)\" href=\"#getsnapshotbeforeupdate(prevprops,-prevstate)\"></a></h3>\n<blockquote>\n<p><a href=\"https://react.docschina.org/docs/react-component.html#getSnapshotBeforeUpdate\">https://react.docschina.org/docs/react-component.html#getSnapshotBeforeUpdate</a><br>\ngetSnapshotBeforeUpdate() 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 componentDidUpdate()。<br>\n此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。<br>\n应返回 snapshot 的值（或 null）。</p>\n</blockquote>\n<p>从官方的demo中，我们理解到有一个情况：</p>\n<ul>\n<li>因为用 fiber 策略的情况，有可能 component 不是实时更新的，可能延后，也可能合并更新，这里的延迟：</li>\n<li>所以，一些依赖于渲染平台的实时值的情况，可以在这里求值。</li>\n<li></li>\n</ul>\n<blockquote>\n<p>在上述示例中，重点是从 getSnapshotBeforeUpdate 读取 scrollHeight 属性，因为 “render” 阶段生命周期（如 render）和 “commit” 阶段生命周期（如 getSnapshotBeforeUpdate 和 componentDidUpdate）之间可能存在延迟。</p>\n</blockquote>\n<p>如果你在此方法中读取 DOM 信息（例如，为了保存滚动位置），则可以将此逻辑移至 getSnapshotBeforeUpdate() 中。</p>\n<h3 id=\"componentdidupdate(prevprops,-prevstate,-snapshot)\">componentDidUpdate(prevProps, prevState, snapshot)<a title=\"#componentdidupdate(prevprops,-prevstate,-snapshot)\" href=\"#componentdidupdate(prevprops,-prevstate,-snapshot)\"></a></h3>\n<p>如果你需要执行副作用（例如，数据提取或动画）以响应 props 中的更改，请改用 componentDidUpdate 生命周期。</p>\n","prev":{"title":"React笔记: 2.3 classComponent 生命周期——更新阶段","link":"20210409/React笔记-2-3-classComponent-生命周期——更新阶段"},"next":{"title":"React笔记: 2.1.1 classComponent 生命周期 defaultProps类型提示坑的写法","link":"20210404/React笔记-2-1-1-classComponent-生命周期_defaultProps类型提示坑的写法"},"plink":"https://xn--vqq264efum.com/20210404/React笔记-2-2-classComponent-生命周期——更新阶段/","toc":[{"id":"更新阶段","title":"更新阶段","index":"1","children":[{"id":"static-getderivedstatefromprops","title":"static getDerivedStateFromProps","index":"1.1"},{"id":"shouldcomponentupdate(nextprops,-nextstate)","title":"shouldComponentUpdate(nextProps, nextState)","index":"1.2"},{"id":"render-————-jsx","title":"render ———— JSX","index":"1.3"},{"id":"getsnapshotbeforeupdate(prevprops,-prevstate)","title":"getSnapshotBeforeUpdate(prevProps, prevState)","index":"1.4"},{"id":"componentdidupdate(prevprops,-prevstate,-snapshot)","title":"componentDidUpdate(prevProps, prevState, snapshot)","index":"1.5"}]}],"reading_time":"703 字约 5 分钟"}