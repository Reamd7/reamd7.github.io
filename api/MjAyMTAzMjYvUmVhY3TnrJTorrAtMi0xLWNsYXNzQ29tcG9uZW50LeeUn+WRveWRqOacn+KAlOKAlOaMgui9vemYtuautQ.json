{"title":"React笔记: 2.1 classComponent 生命周期——挂载阶段","date":"2021-03-26T04:34:36.000Z","link":"20210326/React笔记-2-1-classComponent-生命周期——挂载阶段","tags":["React"],"updated":"2021-04-04T14:36:44.597Z","content":"<html><head></head><body><blockquote>\n<p>reference: <a href=\"https://react.docschina.org/docs/react-component.html\">https://react.docschina.org/docs/react-component.html</a></p>\n</blockquote>\n<iframe style=\"border:1px solid #ccc;border-radius:2px;width:100%;height:300px;\" src=\"/public/$utils/code.html?type=javascript&amp;url=/public/react-doc/02/classComponentLifeCycle.jsx\">\n</iframe>\n\n<h2 id=\"挂载阶段\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期——挂载阶段#挂载阶段\" class=\"headerlink\" title=\"挂载阶段\"></a>挂载阶段</h2><p><code>constructor -&gt; static getDerivedStateFromProps -&gt; render -&gt; componentDidMount</code></p>\n<pre class=\"mermaid\">graph TD\n    Constructor[constructor] --&gt; GetDerivedStateFromProps[static getDerivedStateFromProps]\n    GetDerivedStateFromProps[static getDerivedStateFromProps] --&gt; Render[render]\n    Render[render] --&gt; componentDidMount(componentDidMount)</pre>\n\n<h3 id=\"constructor-NaN\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期——挂载阶段#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li>处理 props 默认值（可以用defaultProps，还是推荐用defaultProps），但是有一些问题：</li>\n<li>⭐处理 state 默认值</li>\n<li>原来有人用<code>bind(this)</code> 处理事件，但是现在都用箭头函数了。</li>\n</ul>\n<p><a href=\"/20210404/React%E7%AC%94%E8%AE%B0-2-1-1-classComponent-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F_defaultProps%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA%E5%9D%91%E7%9A%84%E5%86%99%E6%B3%95\"><strong>typescript 下，安全 defaultProps 类型提示的写法：</strong></a></p>\n<h3 id=\"render-——-return-JSX\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期——挂载阶段#render-——-return-JSX\" class=\"headerlink\" title=\"render —— return JSX\"></a>render —— return JSX</h3><h3 id=\"componentDidMount\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期——挂载阶段#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h3><p>进行 useEffect 的 一堆副作用操作，例如：</p>\n<ul>\n<li>依赖于 DOM 节点的初始化应该放在这里。</li>\n<li>定时器</li>\n<li>如需通过网络请求获取数据，此处是实例化请求的好地方。</li>\n<li>这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅</li>\n</ul>\n<p>但是如果在之前执行，则会阻碍组件的实例化，阻碍组件的渲染</p>\n<p>!! 你可以在 componentDidMount() 里直接调用 setState()。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在 render() 两次调用的情况下，用户也不会看到中间状态。请谨慎使用该模式，因为它会导致性能问题。通常，你应该在 constructor() 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理</p>\n</body></html>","prev":{"title":"React笔记: 1.classComponent 与 FunctionComponent HelloWorld","link":"20210326/React笔记-1-classComponent-与-FunctionComponent-HelloWorld"},"next":{"title":"重学前端笔记","link":"20200108/重学前端笔记"},"plink":"http://reamd7.github.io/20210326/React笔记-2-1-classComponent-生命周期——挂载阶段/","toc":[{"title":"挂载阶段","id":"挂载阶段","index":"1","children":[{"title":"constructor-NaN","id":"constructor-NaN","index":"1.1"},{"title":"render-——-return-JSX","id":"render-——-return-JSX","index":"1.2"},{"title":"componentDidMount","id":"componentDidMount","index":"1.3"}]}]}