{"title":"React笔记: 2.1 classComponent 生命周期","date":"2021-03-26T12:34:36.000Z","date_formatted":{"ll":"2021年3月26日","L":"2021/03/26","MM-DD":"03-26"},"link":"20210326/React笔记-2-1-classComponent-生命周期","tags":["React"],"updated":"2021-04-04T09:34:20.107Z","content":"<blockquote>\n<p>reference: <a href=\"https://react.docschina.org/docs/react-component.html\">https://react.docschina.org/docs/react-component.html</a></p>\n</blockquote>\n<iframe \n    style=\"border:1px solid #ccc;border-radius:2px;width:100%;height:300px;\" \n    src=\"/public/$utils/code.html?type=javascript&url=/public/react-doc/02/classComponentLifeCycle.jsx\">\n</iframe>\n<h2 id=\"挂载阶段\">挂载阶段<a title=\"#挂载阶段\" href=\"#挂载阶段\"></a></h2>\n<p><code>constructor -&gt; static getDerivedStateFromProps -&gt; render -&gt; componentDidMount</code></p>\n<pre class=\"mermaid\">graph TD\n    Constructor[constructor] --> GetDerivedStateFromProps[static getDerivedStateFromProps]\n    GetDerivedStateFromProps[static getDerivedStateFromProps] --> Render[render]\n    Render[render] --> componentDidMount(componentDidMount)</pre>\n<h3 id=\"constructor-function Object() { [native code] }1\">constructor<a title=\"#constructor-function Object() { [native code] }1\" href=\"#constructor-function Object() { [native code] }1\"></a></h3>\n<ul>\n<li>处理 props 默认值（可以用defaultProps，还是推荐用defaultProps），但是有一些问题：</li>\n<li>⭐处理 state 默认值</li>\n<li>原来有人用<code>bind(this)</code> 处理事件，但是现在都用箭头函数了。</li>\n</ul>\n<h4 id=\"defaultprops-下类型提示的写法：\">defaultProps 下类型提示的写法：<a title=\"#defaultprops-下类型提示的写法：\" href=\"#defaultprops-下类型提示的写法：\"></a></h4>\n<pre><code>// 重要核心 ！！ReactElement.js 中\n// // Resolve default props\n// if (type &amp;&amp; type.defaultProps) &#123;\n//   const defaultProps = type.defaultProps;\n//   for (propName in defaultProps) &#123;\n//     if (props[propName] === undefined) &#123; // 排除了undefined\n//       props[propName] = defaultProps[propName];\n//     &#125;\n//   &#125;\n// &#125;\n</code></pre>\n<blockquote>\n<p>原有的<code>defaultProps</code>的 typescript react 是边界情况有误的。<br>\nReactElement.js 中对 <code>defaultProps</code> 的处理情况中，不会处理undefined的值<br>\n所以在 typescript 中 如果在 defaultProps 中 有 undefined 的 值， 对应的字段名是不应该覆盖原有的Props 定义的。</p>\n</blockquote>\n<h5 id=\"原有的示范，也是错误的根源。\">原有的示范，也是错误的根源。<a title=\"#原有的示范，也是错误的根源。\" href=\"#原有的示范，也是错误的根源。\"></a></h5>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ComponentTestProps = &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  quiet?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ComponentTestState = &#123;</span><br><span class=\"line\">  updateString: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">ComponentTestProps</span>,</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">ComponentTestState</span></span></span><br><span class=\"line\"><span class=\"class\">&gt; </span>&#123;</span><br><span class=\"line\">  props: ComponentTestProps;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    test: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    quiet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    name: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 错误的根源</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    updateString: <span class=\"string\">&quot;hello world&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props: ComponentTestProps</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.props = props;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentTest</span> /&gt;</span></span>; <span class=\"comment\">// 这里不会 ts Error, 但是运行时会有 error ，如果没有处理name的情况而完全相信ts的情况下。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"示范，新操作。\">示范，新操作。<a title=\"#示范，新操作。\" href=\"#示范，新操作。\"></a></h5>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OmitByValueExact, Assign &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;utility-types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ComponentTestProps = &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  quiet?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ComponentTestState = &#123;</span><br><span class=\"line\">  updateString: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ActiveProps = Assign&lt;</span><br><span class=\"line\">  Partial&lt;</span><br><span class=\"line\">    Pick&lt;</span><br><span class=\"line\">      ComponentTestProps,</span><br><span class=\"line\">      keyof OmitByValueExact&lt;<span class=\"keyword\">typeof</span> defaultProps, <span class=\"literal\">undefined</span>&gt;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">  &gt; &amp;</span><br><span class=\"line\">    Omit&lt;</span><br><span class=\"line\">      ComponentTestProps,</span><br><span class=\"line\">      keyof OmitByValueExact&lt;<span class=\"keyword\">typeof</span> defaultProps, <span class=\"literal\">undefined</span>&gt;</span><br><span class=\"line\">    &gt;,</span><br><span class=\"line\">  &#123;&#125;</span><br><span class=\"line\">&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123;</span><br><span class=\"line\">  test: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  quiet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  name: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 这里有一个奇怪的ts问题，我并不知道ts做了什么进行对defaultProps的操作。但是显然与我ActiveProps的东西不一样的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ComponentTest = (<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">ComponentTestProps</span>,</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">ComponentTestState</span></span></span><br><span class=\"line\"><span class=\"class\">&gt; </span>&#123;</span><br><span class=\"line\">  props: ComponentTestProps;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> displayName = <span class=\"string\">&quot;ComponentTest&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = defaultProps;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    updateString: <span class=\"string\">&quot;hello world&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props: ComponentTestProps</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.props = props;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> React.ComponentClass&lt;ActiveProps, ComponentTestState&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentTest</span> /&gt;</span></span>; <span class=\"comment\">// Error ! 类型 &quot;&#123;&#125;&quot; 中缺少属性 &quot;name&quot;，但类型 &quot;Readonly&lt;ActiveProps&gt;&quot; 中需要该属性。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"render-——-return-jsx\">render —— return JSX<a title=\"#render-——-return-jsx\" href=\"#render-——-return-jsx\"></a></h3>\n<h3 id=\"componentdidmount\">componentDidMount<a title=\"#componentdidmount\" href=\"#componentdidmount\"></a></h3>\n<p>进行 useEffect 的 一堆副作用操作，例如：</p>\n<ul>\n<li>依赖于 DOM 节点的初始化应该放在这里。</li>\n<li>定时器</li>\n<li>如需通过网络请求获取数据，此处是实例化请求的好地方。</li>\n<li>这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅</li>\n</ul>\n<p>但是如果在之前执行，则会阻碍组件的实例化，阻碍组件的渲染</p>\n<p>!! 你可以在 componentDidMount() 里直接调用 setState()。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在 render() 两次调用的情况下，用户也不会看到中间状态。请谨慎使用该模式，因为它会导致性能问题。通常，你应该在 constructor() 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理</p>\n","next":{"title":"React笔记: 1.classComponent 与 FunctionComponent HelloWorld","link":"20210326/React笔记-1-classComponent-与-FunctionComponent-HelloWorld"},"plink":"http://reamd7.github.io/20210326/React笔记-2-1-classComponent-生命周期/","toc":[{"id":"挂载阶段","title":"挂载阶段","index":"1","children":[{"id":"constructor-function Object() { [native code] }1","title":"constructor","index":"1.1"},{"id":"render-——-return-jsx","title":"render —— return JSX","index":"1.2"},{"id":"componentdidmount","title":"componentDidMount","index":"1.3"}]}],"reading_time":"786 字约 5 分钟"}