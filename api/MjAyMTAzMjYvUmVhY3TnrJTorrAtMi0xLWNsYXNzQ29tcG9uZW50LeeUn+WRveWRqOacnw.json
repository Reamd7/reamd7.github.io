{"title":"React笔记: 2.1 classComponent 生命周期","date":"2021-03-26T04:34:36.000Z","link":"20210326/React笔记-2-1-classComponent-生命周期","tags":["React"],"updated":"2021-04-03T18:13:08.972Z","content":"<html><head></head><body><blockquote>\n<p>reference: <a href=\"https://react.docschina.org/docs/react-component.html\">https://react.docschina.org/docs/react-component.html</a></p>\n</blockquote>\n<iframe style=\"border:1px solid #ccc;border-radius:2px;width:100%;height:300px;\" src=\"/public/$utils/code.html?type=javascript&amp;url=/public/react-doc/02/classComponentLifeCycle.jsx\">\n</iframe>\n\n<h2 id=\"挂载阶段\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#挂载阶段\" class=\"headerlink\" title=\"挂载阶段\"></a>挂载阶段</h2><p><code>constructor -&gt; static getDerivedStateFromProps -&gt; render -&gt; componentDidMount</code></p>\n<pre class=\"mermaid\">graph TD\n    Constructor[constructor] --&gt; GetDerivedStateFromProps[static getDerivedStateFromProps]\n    GetDerivedStateFromProps[static getDerivedStateFromProps] --&gt; Render[render]\n    Render[render] --&gt; componentDidMoun(componentDidMount)</pre>\n\n<h3 id=\"constructor-NaN\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li>处理 props 默认值（可以用defaultProps，还是推荐用defaultProps），但是有一个问题：<blockquote>\n<p>如果使用typescript 的时候</p>\n<figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">ComponentProps</span>, <span class=\"title\">ComponentState</span>&gt; </span>{</span><br><span class=\"line\">  props: Components = </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></div></figure></blockquote>\n</li>\n<li>⭐处理 state 默认值</li>\n<li>原来有人用<code>bind(this)</code> 处理事件，但是现在都用箭头函数了。</li>\n</ul>\n<h4 id=\"defaultProps-下类型提示的写法：\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#defaultProps-下类型提示的写法：\" class=\"headerlink\" title=\"defaultProps 下类型提示的写法：\"></a>defaultProps 下类型提示的写法：</h4><pre><code>// 重要核心 ！！ReactElement.js 中\n// // Resolve default props\n// if (type &amp;&amp; type.defaultProps) {\n//   const defaultProps = type.defaultProps;\n//   for (propName in defaultProps) {\n//     if (props[propName] === undefined) { // 排除了undefined\n//       props[propName] = defaultProps[propName];\n//     }\n//   }\n// }\n</code></pre>\n<blockquote>\n<p>原有的<code>defaultProps</code>的 typescript react 是边界情况有误的。<br>ReactElement.js 中对 <code>defaultProps</code> 的处理情况中，不会处理undefined的值<br>所以在 typescript 中 如果在 defaultProps 中 有 undefined 的 值， 对应的字段名是不应该覆盖原有的Props 定义的。</p>\n</blockquote>\n<h5 id=\"原有的示范，也是错误的根源。\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#原有的示范，也是错误的根源。\" class=\"headerlink\" title=\"原有的示范，也是错误的根源。\"></a>原有的示范，也是错误的根源。</h5><figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from \"react\";</span><br><span class=\"line\">type ComponentTestProps = {</span><br><span class=\"line\">  test: boolean;</span><br><span class=\"line\">  quiet?: boolean;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">};</span><br><span class=\"line\">type ComponentTestState = {</span><br><span class=\"line\">  updateString: string;</span><br><span class=\"line\">};</span><br><span class=\"line\">class ComponentTest extends React.Component&lt;</span><br><span class=\"line\">  ComponentTestProps,</span><br><span class=\"line\">  ComponentTestState</span><br><span class=\"line\">&gt; {</span><br><span class=\"line\">  props: ComponentTestProps;</span><br><span class=\"line\">  static defaultProps = {</span><br><span class=\"line\">    test: true,</span><br><span class=\"line\">    quiet: false,</span><br><span class=\"line\">    name: undefined, // 错误的根源</span><br><span class=\"line\">  };</span><br><span class=\"line\">  state = {</span><br><span class=\"line\">    updateString: \"hello world\",</span><br><span class=\"line\">  };</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(props: ComponentTestProps) {</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.props = props;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\">function Main() {</span><br><span class=\"line\">  return &lt;ComponentTest /&gt;; // 这里不会 ts Error, 但是运行时会有 error ，如果没有处理name的情况而完全相信ts的情况下。</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></div></figure>\n\n<h5 id=\"示范，新操作。\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#示范，新操作。\" class=\"headerlink\" title=\"示范，新操作。\"></a>示范，新操作。</h5><figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from \"react\";</span><br><span class=\"line\">import { OmitByValueExact, Assign } from \"utility-types\";</span><br><span class=\"line\"></span><br><span class=\"line\">type ComponentTestProps = {</span><br><span class=\"line\">  test: boolean;</span><br><span class=\"line\">  quiet?: boolean;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">};</span><br><span class=\"line\">type ComponentTestState = {</span><br><span class=\"line\">  updateString: string;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">type ActiveProps = Assign&lt;</span><br><span class=\"line\">  Partial&lt;</span><br><span class=\"line\">    Pick&lt;</span><br><span class=\"line\">      ComponentTestProps,</span><br><span class=\"line\">      keyof OmitByValueExact&lt;typeof defaultProps, undefined&gt;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">  &gt; &amp;</span><br><span class=\"line\">    Omit&lt;</span><br><span class=\"line\">      ComponentTestProps,</span><br><span class=\"line\">      keyof OmitByValueExact&lt;typeof defaultProps, undefined&gt;</span><br><span class=\"line\">    &gt;,</span><br><span class=\"line\">  {}</span><br><span class=\"line\">&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">const defaultProps = {</span><br><span class=\"line\">  test: true,</span><br><span class=\"line\">  quiet: false,</span><br><span class=\"line\">  name: undefined, // 这里有一个奇怪的ts问题，我并不知道ts做了什么进行对defaultProps的操作。但是显然与我ActiveProps的东西不一样的</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">const ComponentTest = (class extends React.Component&lt;</span><br><span class=\"line\">  ComponentTestProps,</span><br><span class=\"line\">  ComponentTestState</span><br><span class=\"line\">&gt; {</span><br><span class=\"line\">  props: ComponentTestProps;</span><br><span class=\"line\">  static displayName = \"ComponentTest\";</span><br><span class=\"line\">  static defaultProps = defaultProps;</span><br><span class=\"line\">  state = {</span><br><span class=\"line\">    updateString: \"hello world\",</span><br><span class=\"line\">  };</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(props: ComponentTestProps) {</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.props = props;</span><br><span class=\"line\">  }</span><br><span class=\"line\">} as unknown) as React.ComponentClass&lt;ActiveProps, ComponentTestState&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Main() {</span><br><span class=\"line\">  return &lt;ComponentTest /&gt;; // Error ! 类型 \"{}\" 中缺少属性 \"name\"，但类型 \"Readonly&lt;ActiveProps&gt;\" 中需要该属性。</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></div></figure>\n<h2 id=\"render-——-return-JSX\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#render-——-return-JSX\" class=\"headerlink\" title=\"render —— return JSX\"></a>render —— return JSX</h2><h2 id=\"componentDidMount\"><a href=\"20210326/React笔记-2-1-classComponent-生命周期#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h2><p>进行 useEffect 的 一堆副作用操作，例如：</p>\n<ul>\n<li>依赖于 DOM 节点的初始化应该放在这里。</li>\n<li>定时器</li>\n<li>如需通过网络请求获取数据，此处是实例化请求的好地方。</li>\n<li>这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅</li>\n</ul>\n<p>但是如果在之前执行，则会阻碍组件的实例化，阻碍组件的渲染</p>\n<p>!! 你可以在 componentDidMount() 里直接调用 setState()。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在 render() 两次调用的情况下，用户也不会看到中间状态。请谨慎使用该模式，因为它会导致性能问题。通常，你应该在 constructor() 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理</p>\n</body></html>","next":{"title":"React笔记: 1.classComponent 与 FunctionComponent HelloWorld","link":"20210326/React笔记-1-classComponent-与-FunctionComponent-HelloWorld"},"plink":"http://reamd7.github.io/20210326/React笔记-2-1-classComponent-生命周期/","toc":[{"title":"","id":"挂载阶段","index":"1","children":[{"title":"","id":"constructor-NaN","index":"1.1","children":[{"title":"","id":"defaultProps-下类型提示的写法：","index":"1.1.1"}]}]},{"title":"","id":"render-——-return-JSX","index":"2"},{"title":"","id":"componentDidMount","index":"3"}]}